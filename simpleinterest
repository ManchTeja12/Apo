package com.saveetha.interest

import android.annotation.SuppressLint
import android.app.DatePickerDialog
import android.app.Dialog
import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.widget.*
import androidx.appcompat.app.AppCompatActivity
import com.saveetha.interest.models.SimpleInterestResponse
import com.saveetha.interest.network.ApiClient
import com.saveetha.interest.network.ApiService
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.text.SimpleDateFormat
import java.util.*

class SimpleInterestActivity : AppCompatActivity() {

    private lateinit var edtPrincipalAmount: EditText
    private lateinit var edtInterestRate: EditText
    private lateinit var edtFromDate: EditText
    private lateinit var edtToDate: EditText
    private lateinit var btnCalculate: Button
    private lateinit var btnReset: Button
    private lateinit var btnSave: Button
    private lateinit var tvInterestAmount: TextView
    private lateinit var tvInterestRate: TextView
    private lateinit var tvInterestTime: TextView
    private lateinit var tvTotalAmount: TextView

    private var from_Date: String = ""
    private var to_Date: String = ""
    private var interestAmount = 0.0
    private var totalAmount = 0.0
    private var timePeriod = ""
    private var principal = 0.0
    private var interestRate = 0.0

    private val dateFormat = SimpleDateFormat("dd-MM-yyyy", Locale.getDefault())
    private val TAG = "SimpleInterestActivity"

    private val userId = "1" // ðŸ”¹ Replace with logged-in user_id (from Login)

    @SuppressLint("MissingInflatedId")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_simple_interest)

        initializeViews()
        setupClickListeners()
    }

    private fun initializeViews() {
        edtPrincipalAmount = findViewById(R.id.edtPrincipalAmount)
        edtInterestRate = findViewById(R.id.edtInterest_Rate)
        edtFromDate = findViewById(R.id.edtFromDate)
        edtToDate = findViewById(R.id.edtToDate)
        btnCalculate = findViewById(R.id.btnCalculate)
        btnReset = findViewById(R.id.btnReset)
        btnSave = findViewById(R.id.btnSave)

        tvInterestAmount = findViewById(R.id.tvInterestAmount)
        tvInterestRate = findViewById(R.id.tvInterestRate)
        tvInterestTime = findViewById(R.id.tvInteresttime)
        tvTotalAmount = findViewById(R.id.tvTotalAmount)

        edtFromDate.isFocusable = false
        edtToDate.isFocusable = false
    }

    private fun setupClickListeners() {
        edtFromDate.setOnClickListener { showDatePicker(true) }
        edtToDate.setOnClickListener { showDatePicker(false) }
        btnCalculate.setOnClickListener { calculateInterest() }
        btnReset.setOnClickListener { resetFields() }
        btnSave.setOnClickListener {
            showSaveDialog()
        }
    }

    private fun showDatePicker(isFromDate: Boolean) {
        val calendar = Calendar.getInstance()
        val dpd = DatePickerDialog(this, { _, year, month, day ->
            val selectedDate = Calendar.getInstance()
            selectedDate.set(year, month, day)
            val formattedDate = dateFormat.format(selectedDate.time)

            if (isFromDate) {
                from_Date = formattedDate
                edtFromDate.setText(formattedDate)
            } else {
                to_Date = formattedDate
                edtToDate.setText(formattedDate)
            }
        }, calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH))

        dpd.show()
    }

    private fun calculateInterest() {
        val principalText = edtPrincipalAmount.text.toString().trim()
        val rateText = edtInterestRate.text.toString().trim()

        if (principalText.isEmpty() || rateText.isEmpty() || from_Date.isEmpty() || to_Date.isEmpty()) {
            Toast.makeText(this, "Please fill in all fields", Toast.LENGTH_SHORT).show()
            return
        }

        principal = principalText.toDoubleOrNull() ?: 0.0
        interestRate = rateText.toDoubleOrNull() ?: 0.0

        if (principal <= 0 || interestRate <= 0) {
            Toast.makeText(this, "Invalid values", Toast.LENGTH_SHORT).show()
            return
        }

        val apiService = ApiClient.getClient().create(ApiService::class.java)
        val call = apiService.calculateSimpleInterest(
            userId,
            principal.toString(),
            interestRate.toString(),
            from_Date,
            to_Date
        )
        Log.d(TAG, "Sending: $principal, $interestRate, $from_Date, $to_Date")

        call.enqueue(object : Callback<SimpleInterestResponse> {
            override fun onResponse(call: Call<SimpleInterestResponse>, response: Response<SimpleInterestResponse>) {
                if (response.isSuccessful) {
                    val body = response.body()
                    if (body != null && body.status == 200) {
                        interestAmount = body.simple_interest
                        totalAmount = body.Total_Amount
                        timePeriod = body.Time_Period

                        tvInterestAmount.text = "Interest Earned: â‚¹%.2f".format(interestAmount)
                        tvInterestRate.text = "Interest Rate: %.2f%%".format(body.Interest_Rate)
                        tvInterestTime.text = "Time Period: ${body.Time_Period} (%.4f years)".format(body.Total_Years)
                        tvTotalAmount.text = "Total Amount: â‚¹%.2f".format(totalAmount)

                        Toast.makeText(this@SimpleInterestActivity, "Calculation saved!", Toast.LENGTH_SHORT).show()
                    } else {
                        Toast.makeText(this@SimpleInterestActivity, "Error: ${body?.message ?: "Unknown"}", Toast.LENGTH_SHORT).show()
                    }
                } else {
                    Toast.makeText(this@SimpleInterestActivity, "Server error: ${response.code()}", Toast.LENGTH_SHORT).show()
                }
            }

            override fun onFailure(call: Call<SimpleInterestResponse>, t: Throwable) {
                Toast.makeText(this@SimpleInterestActivity, "Network error: ${t.message}", Toast.LENGTH_LONG).show()
            }
        })
    }

    private fun showSaveDialog() {
        if (interestAmount > 0) {
            val dialog = Dialog(this)
            val view = LayoutInflater.from(this).inflate(R.layout.dialog_save_borrower, null)
            dialog.setContentView(view)

            val etBorrowerName = view.findViewById<EditText>(R.id.etBorrowerName)
            val cbAddToBook = view.findViewById<CheckBox>(R.id.cbAddToBook)
            val btnCancel = view.findViewById<Button>(R.id.btnCancel)
            val btnSaveNow = view.findViewById<Button>(R.id.btnSave)

            btnCancel.setOnClickListener {
                dialog.dismiss()
            }

            btnSaveNow.setOnClickListener {
                val name = etBorrowerName.text.toString().trim()
                val addToBook = cbAddToBook.isChecked

                if (name.isEmpty()) {
                    Toast.makeText(this, "Please enter borrower name", Toast.LENGTH_SHORT).show()
                    return@setOnClickListener
                }

                if (addToBook) {
                    // Call API to actually save in the MySQL:
                    val apiService = ApiClient.getClient().create(ApiService::class.java)
                    apiService.calculateSimpleInterest(
                        userId,
                        principal.toString(),
                        interestRate.toString(),
                        from_Date,
                        to_Date
                    ).enqueue(object : Callback<SimpleInterestResponse> {
                        override fun onResponse(
                            call: Call<SimpleInterestResponse>,
                            response: Response<SimpleInterestResponse>
                        ) {
                            if (response.isSuccessful && response.body()?.status == 200) {
                                Toast.makeText(
                                    this@SimpleInterestActivity,
                                    "Saved to Book for $name",
                                    Toast.LENGTH_SHORT
                                ).show()
                                dialog.dismiss()
                            } else {
                                Toast.makeText(
                                    this@SimpleInterestActivity,
                                    "Failed to save",
                                    Toast.LENGTH_SHORT
                                ).show()
                            }
                        }

                        override fun onFailure(call: Call<SimpleInterestResponse>, t: Throwable) {
                            Toast.makeText(
                                this@SimpleInterestActivity,
                                "Network Error: ${t.message}",
                                Toast.LENGTH_SHORT
                            ).show()
                        }
                    })
                } else {
                    Toast.makeText(this, "Not added to Book (checkbox unchecked)", Toast.LENGTH_SHORT).show()
                    dialog.dismiss()
                }
            }

            dialog.window?.setLayout(
                (resources.displayMetrics.widthPixels * 0.85).toInt(),
                LinearLayout.LayoutParams.WRAP_CONTENT
            )
            dialog.show()
        } else {
            Toast.makeText(this, "Please calculate first!", Toast.LENGTH_SHORT).show()
            return
        }
    }

    private fun resetFields() {
        edtPrincipalAmount.text.clear()
        edtInterestRate.text.clear()
        edtFromDate.text.clear()
        edtToDate.text.clear()

        from_Date = ""
        to_Date = ""
        principal = 0.0
        interestRate = 0.0
        interestAmount = 0.0
        totalAmount = 0.0
        timePeriod = ""

        tvInterestAmount.text = ""
        tvInterestRate.text = ""
        tvInterestTime.text = ""
        tvTotalAmount.text = ""

        Toast.makeText(this, "Fields reset", Toast.LENGTH_SHORT).show()
    }
}
